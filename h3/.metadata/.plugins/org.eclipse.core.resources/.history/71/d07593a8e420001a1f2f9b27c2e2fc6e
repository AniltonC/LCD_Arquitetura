#include "stdint.h"
#include "MKL25Z4.h"

#include "./Teclado/mkl_KeyboardParallelPort.h"
#include "./Bibliotecas/Systick/mkl_SystickPeriodicInterrupt.h"
#include "./Dispositivos/led.h"
#include "./Dispositivos/switch.h"
#include "./Dispositivos/displaySegments.h"
#include "./Dispositivos/decoder.h"
#include "./Servicos/cozimento.h"
#include "./Servicos/editService.h"
#include "./Servicos/incrementService.h"

#include "./Classes/services.h"
#include "./Classes/monitor.h"
#include "./Classes/devices.h"
#include "../Includes/mkl_HC06BluetoothSlave.h"


//DeclaraÁ„o do LCD
MonitorLCD LCDTimerMonitor = MonitorLCD();
uint8_t tempo[4] = {0, 0, 0, 0};

////Declara√ß√£o do bluetooh
//mkl_HC06BluetoothSlave bt(uart0_PTD7, uart0_PTD6);
//char buf = '0';
//char aux = '0';
//Declara√ß√£o do teclado

mkl_KeyboardParallelPort keyboard(gpio_PTA13, gpio_PTD5, gpio_PTD0, gpio_PTD2,
								  gpio_PTC12, gpio_PTC13, gpio_PTC16, gpio_PTC17);

////Declara√ß√£o do 7 segmentos
//displaySegments display(gpio_PTC7, gpio_PTC0, gpio_PTC3, gpio_PTC4, gpio_PTC5,
//						gpio_PTC6, gpio_PTC10, gpio_PTC1, gpio_PTE29, gpio_PTE23, gpio_PTE22);

mkl_SystickPeriodicInterrupt systick = mkl_SystickPeriodicInterrupt(1, clock42Mhz);
//
registrador Us(0);
registrador Ds(0);
registrador Um(0);
registrador Dm(0);
//
Switch botao3(gpio_PTB9), botao7(gpio_PTB11);

Switch permission(gpio_PTE5);

controlador service_edit;

IncrementService service_inc;

CozimentoService service_coz;

char key;
uint8_t valor = 0;

extern "C"{
//	void UART0_IRQHandler(){
//		buf = bt.receive8Bits();
//	}
	void SysTick_Handler(void){
		keyboard.update();
		key = keyboard.getKey();
		if (keyboard.keyIsPressed())
		{
			valor = key;
		}
		LCDTimerMonitor.doServiceFromIRQ();
	}
}

//void setupBluetooth()
//{
//	bt.setInterruptMode(uart_Rx);
//	bt.setPriority(uart_Priority0);
//	bt.enableInterrupt();
//}

int main(){
//	__disable_irq();
//	setupBluetooth(); //! Configura o perif√©rico bluetooth
//	__enable_irq();
	LCDTimerMonitor.monMemory.setTempoGeral(tempo);
	while (1){
		service_edit.maq_est(keyboard.keyIsPressed(), !permission.read());
		service_edit.select_service();
		service_edit.do_service(&Dm, &Um, &Ds, &Us, valor);

		service_inc.machineState(botao3.isOn(), botao7.isOn(), !permission.read());
		service_inc.selectService();
		service_inc.doService(&Dm, &Um, &Ds, &Us);
		//
		//
//		if (aux != buf){
//			aux = buf;
//			service_coz.machineState(aux, 1);
//			service_coz.selectService();
//			service_coz.doService(&Dm, &Um, &Ds, &Us);
//		}
//		tempo[3] = Us.leValor();
//		tempo[2] = Ds.leValor();
//		tempo[1] = Um.leValor();
//		tempo[0] = Dm.leValor();
//		LCDTimerMonitor.monMemory.setTempoGeral(tempo);
//		LCDTimerMonitor.monMemory.setOperGeral(oper);
//		LCDTimerMonitor.monMemory.setCookGeral(ed);
//		display.monitora(Dm.leValor(), Um.leValor(), Ds.leValor(), Us.leValor());
		LCDTimerMonitor.doService();
	}
	return 0;
}
